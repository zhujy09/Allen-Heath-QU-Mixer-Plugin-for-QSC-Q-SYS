-- Basic Framework Plugin
-- by QSC
-- October 2020

-- Information block for the plugin
PluginInfo = {
  Name = "Allen & Heath~Qu Mixer",
  Version = "1.0",
  BuildVersion = "1.0.0.139",
  Id = "5b589c6d-5137-492a-a163-2bbfd2f949d4",
  Author = "Johnny Zhu",
  Description = "Johnny's first plugin"  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 0, 50, 200 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Allen & Heath~QU Mixer, version " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Setup", "Control" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Base Model" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  table.insert(props, {
    Name = "Model", 
    Type = "enum", 
    --Choices = {"Qu-16", "Qu-24", "Qu-32", "Qu-SB", "Qu-Pac"}, Value = "Qu-32"
    Choices = {"Qu-32", "Other"}, Value = "Qu-32"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  --[[ table.insert(pins,{
    Name = "Audio Output",
    Direction = "output",
  }) ]]
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  table.insert(components,{
    Name = "main_mixer",
    Type = "mixer",
    Properties =   
    {
      ["n_inputs"] = 8,
      ["n_outputs"] = 1,
    }
  })
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  -- table.insert( wiring, { "Audio Output", "main_mixer Output 1" } )
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls, {
    Name = "SceneButton",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 25,
    --UserPin = true,
    --PinStyle = "Input",
    Icon = "<NONE>"
  })
  table.insert(ctrls, {
    Name = "SceneKnob",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Count = 1,
    Min = 1, 
    Max = 100,
    UserPin = true,
    PinStyle = "Both"
  })
  table.insert(ctrls, {
    Name = "InputMute",
    ControlType = "Button",
    ButtonType = "Toggle",
    Count = 35,
    --UserPin = true,
    --PinStyle = "Both",
    Icon = "<NONE>"
  })
  table.insert(ctrls, {
    Name = "InputFader",
    ControlType = "Knob",
    ButtonType = "Fader",
    Count = 35,
    Min = 0, 
    Max = 127,
    --UserPin = true,
    --PinStyle = "Both",
  })
  table.insert(ctrls, {
    Name = "OutputMute",
    ControlType = "Button",
    ButtonType = "Toggle",
    Count = 14,
    --UserPin = true,
    --PinStyle = "Both",
    Icon = "<NONE>"
  })
  table.insert(ctrls, {
    Name = "OutputFader",
    ControlType = "Knob",
    ButtonType = "Fader",
    Count = 35,
    Min = 0, 
    Max = 127,
    --UserPin = true,
    --PinStyle = "Both",
  })
  
  
  --**Controls on Page "Setup"
  table.insert(ctrls, {
    Name = "IP Address",
    ControlType = "Text",
    Count = 1,
    DefaultValue = "127.0.0.1"
  })
  table.insert(ctrls, {
    Name = "Port",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Count = 1,
    Min = 1, 
    Max = 65535,
    DefaultValue = 51325
  })
  table.insert(ctrls, {
    Name = "Status",
    ControlType = "Indicator", 
    IndicatorType = "Status",
    Count = 1,
    UserPin = true,
    PinStyle = "Output"
  })
  table.insert(ctrls, {
    Name = "MIDI Channel",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Count = 1,
    Min = 1, 
    Max = 16,
    DefaultValue = 1
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  --*** Page "Control" ********************************************************************************************* 
  if CurrentPage == "Control" then
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "Control",
      TextSize = 15,
      Fill = {118,178,219},
      StrokeWidth = 1,
      Position = {0,0},
      Size = {1280,720}
    })
    table.insert(graphics,{
      Type = "Header",
      Text = "Scene Recall",
      TextSize = 12,
      Fill = {50,50,50},
      StrokeWidth = 1,
      Position = {10,30},
      Size = {1260,15}
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Button",
      TextSize = 12,
      Position = {10,80},
      Size = {60,24},
      FontSize = 11,
      HTextAlign = "Right"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Combo Box",
      Position = {10,154},
      Size = {60,24},
      TextSize = 12,
      HTextAlign = "Right"
    })
    --Scene Buttons
    for sceneIdx = 1, 25 do
      layout["SceneButton "..sceneIdx] = {
        PrettyName = "Buttons~Recall Scene ",
        Style = "Button",
        Position = {75 + 48*(sceneIdx-1), 80},
        TextSize = 12,
        Size = {48,24},
        Color = {255,255,255},
        Legend = tostring(sceneIdx)
      }
    end
    --Scene Knob
    layout["SceneKnob"] = {
      PrettyName = "Knob~Recall Scene ",
      Style = "ComboBox",
      Position = {75, 154},
      Size = {60,24},
      Color = {110,198,241},
      TextSize = 12,
    }
    --Connection Status Led Indicator
    layout["Status"] = {
      Style = "Led", 
      PrettyName = "Device~Connection Status", 
      Position = {2, 2}, 
      Size = {16, 16},
      Margin = 2,
      TextSize = 12,
  
    }
    table.insert(graphics,{
      Type = "Header",
      Text = "Inputs",
      TextSize = 12,
      Fill = {50,50,50},
      StrokeWidth = 1,
      Position = {10,210},
      Size = {1260,15}
    })
    
    table.insert(graphics,{
      Type = "Header",
      Text = "Outputs",
      TextSize = 12,
      Fill = {50,50,50},
      StrokeWidth = 1,
      Position = {10,480},
      Size = {1260,15}
    })
    --Input Labels
    for channelIdx = 1, 32 do
      table.insert(graphics,{
        Type = "Text",
        Text = tostring(channelIdx),
        TextSize = 12,
        Position = {10 + 36*(channelIdx-1), 234},
        Size = {36,36},
        FontSize = 11,
        HTextAlign = "Middle"
      })
    end 
    for channelIdx = 1, 3 do
      table.insert(graphics,{
        Type = "Text",
        Text = "ST"..tostring(channelIdx),
        TextSize = 12,
        Position = {1162 + 36*(channelIdx-1), 234},
        Size = {36,36},
        FontSize = 11,
        HTextAlign = "Middle"
      })
    end 
    --Output Labels
    for channelIdx = 1, 4 do
      table.insert(graphics,{
        Type = "Text",
        Text = tostring(channelIdx),
        TextSize = 12,
        Position = {10 + 36*(channelIdx-1), 504},
        Size = {36,36},
        FontSize = 11,
        HTextAlign = "Middle"
      })
    end 
    table.insert(graphics,{
      Type = "Text",
      Text = "5-6",
      TextSize = 12,
      Position = {154, 504},
      Size = {36,36},
      FontSize = 11,
      HTextAlign = "Middle"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "7-8",
      TextSize = 12,
      Position = {190, 504},
      Size = {36,36},
      FontSize = 11,
      HTextAlign = "Middle"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "9-10",
      TextSize = 12,
      Position = {226, 504},
      Size = {36,36},
      FontSize = 11,
      HTextAlign = "Middle"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "LR",
      TextSize = 12,
      Position = {262, 504},
      Size = {36,36},
      FontSize = 11,
      HTextAlign = "Middle"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Grp 1-2",
      TextSize = 12,
      Position = {298, 504},
      Size = {36,36},
      FontSize = 11,
      HTextAlign = "Middle"
    })
     
    table.insert(graphics,{
      Type = "Text",
      Text = "Grp 3-4",
      TextSize = 12,
      Position = {334, 504},
      Size = {36,36},
      FontSize = 11,
      HTextAlign = "Middle"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Grp 5-6",
      TextSize = 12,
      Position = {370, 504},
      Size = {36,36},
      FontSize = 11,
      HTextAlign = "Middle"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Grp 7-8",
      TextSize = 12,
      Position = {406, 504},
      Size = {36,36},
      FontSize = 11,
      HTextAlign = "Middle"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "MTX 1-2",
      TextSize = 12,
      Position = {442, 504},
      Size = {36,36},
      FontSize = 11,
      HTextAlign = "Middle"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "MTX 1-2",
      TextSize = 12,
      Position = {478, 504},
      Size = {36,36},
      FontSize = 11,
      HTextAlign = "Middle"
    })
    -- InputMute Buttons
    for channelIdx = 1, 35 do
      layout["InputMute "..channelIdx] = {
        PrettyName = "Buttons~Input Mute ",
        Style = "Button",
        Position = {10 + 36*(channelIdx-1), 270},
        TextSize = 12,
        Size = {36,16},
        Color = {255,0,0},
        --Legend = tostring(sceneIdx)
      }
    end
    -- InputMute Faders
    for channelIdx = 1, 35 do
      layout["InputFader "..channelIdx] = {
        PrettyName = "Fader~Input Fader ",
        Style = "Fader",
        Position = {10 + 36*(channelIdx-1), 297},
        TextSize = 12,
        Size = {36,128},
      }
    end
    -- OutputMute Buttons
    for channelIdx = 1, 14 do
      layout["OutputMute "..channelIdx] = {
        PrettyName = "Buttons~Output Mute ",
        Style = "Button",
        Position = {10 + 36*(channelIdx-1), 540},
        TextSize = 12,
        Size = {36,16},
        Color = {255,0,0},
      }
    end
    -- OutputMute Faders
    for channelIdx = 1, 14 do
      layout["OutputFader "..channelIdx] = {
        PrettyName = "Fader~Output Fader ",
        Style = "Fader",
        Position = {10 + 36*(channelIdx-1), 567},
        TextSize = 12,
        Size = {36,128},
      }
    end
  
    --*** Page "Setup" ********************************************************************************************* 
  elseif CurrentPage == "Setup" then
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "Setup",
      TextSize = 15,
      Fill = {118,178,219},
      StrokeWidth = 1,
      Position = {0,0},
      Size = {350,250}
    })
    --Show AH logo
    local AHLogo = ""
    table.insert(graphics,{
      Type="Image",
      Image=AHLogo,
      Position={205,220},
      Size={141,30}
    })
    --Show Qu logo
    local QuLogo = "iVBORw0KGgoAAAANSUhEUgAAAR0AAACmCAYAAADnEFt5AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkJBNzMxOEMxMDFENTExRUNCMDMwOEIzRjlCQUZCMEI3IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkJBNzMxOEMyMDFENTExRUNCMDMwOEIzRjlCQUZCMEI3Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6QkE3MzE4QkYwMUQ1MTFFQ0IwMzA4QjNGOUJBRkIwQjciIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6QkE3MzE4QzAwMUQ1MTFFQ0IwMzA4QjNGOUJBRkIwQjciLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5xTE9sAAAOG0lEQVR42uydC5Rd0xnH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"
    table.insert(graphics,{
      Type="Image",
      Image=QuLogo,
      Position={228,0},
      Size={115,67}
    })
  
    table.insert(graphics,{
      Type = "Header",
      Text = "Setup",
      TextSize = 12,
      Fill = {50,50,50},
      StrokeWidth = 1,
      Position = {10,30},
      Size = {205,15}
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "IP Address",
      TextSize = 12,
      Position = {12,80},
      Size = {72,24},
      HTextAlign = "Right"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Port: 51325 ",
      TextSize = 12,
      Position = {12,104},
      Size = {72,24},
      HTextAlign = "Right"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Status",
      TextSize = 12,
      Position = {12,140},
      Size = {72,24},
      HTextAlign = "Right"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "MIDI Channel",
      TextSize = 12,
      Position = {12,176},
      Size = {72,24},
      HTextAlign = "Right"
    })
    layout["IP Address"] = {
      PrettyName = "Mixer's IP Address",
      Style = "TextField",
      Position = {84, 80},
      Size = {106,24},
      Color = {255,255,255},
      TextSize = 12,
    }
  --[[   layout["Port"] = {
      PrettyName = "Fixed at 51325",
      Style = "TextField",
      Position = {84, 105},
      Size = {106,24},
      Color = {110,198,241},
      TextSize = 12,
    }
   ]]
    layout["Status"] = {
      PrettyName = "Connection Status",
      Style = "Status",
      Position = {84, 138},
      Size = {230,24}
      --Color = {194,194,194},
      --IsReadOnly = true
    }
    layout["MIDI Channel"] = {
      PrettyName = "MIDI Channel (Setup on Mixer)",
      Style = "ComboBox",
      Position = {84, 176},
      Size = {60,24},
      Color = {110,198,241},
      TextSize = 12,
    }
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  --Johnny Zhu
  --jianyezhu@qq.com
  --2021.08.30
  --------------------------------------------------------------------
  -- UI variables
  --------------------------------------------------------------------
  -- controls
  --btn_enable = Controls["Enable"]
  knob_midichannel = Controls["MIDI Channel"]
  
  btn_scene = Controls["SceneButton"]
  knob_scene = Controls["SceneKnob"]
  -- btn_scene = Controls.SceneButton
  -- knob_scene = Controls.SceneKnob
  
  btn_inputmute = Controls["InputMute"]
  fader_inputfader = Controls["InputFader"]
  btn_outputmute = Controls["OutputMute"]
  fader_outputfader = Controls["OutputFader"]
  
  --Connection Status
  stat_details = Controls["Status"]
  --[[ Status.Value:
  5-Initializing-blue	
  4-Missing	-#C00000	
  3-Not Present-gray	
  2-Fault-red	
  1-Compromised-orange	
  0-OK-green	
  ]]--
  
  -- TCP/UCP connection
  txt_address = Controls["IP Address"]
  knb_port = Controls["Port"]
  knb_port.Value = 51325
  
  
  --------------------------------------------------------------------
  -- Other variables and CONSTANTS
  --------------------------------------------------------------------
  --Global Variables
  tx = ""
  midiChannel = knob_midichannel.Value -1 
  
  --CONSTANTS
  --STX = "\x02"
  ETX = ""
  --ETX = "\x0D\x0A"
  
  -- commands to device
  
  --------------------------------------------------------------------
  -- Function Definition
  --------------------------------------------------------------------
  function DebugFormatHex(string,hex) -- Format strings containing non-printable characters so we can see what they are
    local visual = ""
    local format = hex~=nil and "\\x%02x" or "[%02X]" --hex==nil: format="[%02X]";  hex~=nil: format="\\x%02x"
    for i=1,#string do
      local byte = string:sub(i,i)
      visual = visual..string.format(format,string.byte(byte))
    end
    return visual
  end
  
  --------------------------------------------------------------------
  -- Socket Connection
  --------------------------------------------------------------------
  -- socket
  sock = TcpSocket.New()
  sock.ReadTimeout = 0
  sock.WriteTimeout = 0
  sock.ReconnectTimeout = 5
  sock:Connect(txt_address.String, knb_port.Value)
  
  -- send data
  function send(data)
    --print("sending: "..data)
    tx = data
    sock:Connect(txt_address.String, knb_port.Value)
  end
  
  -- report connection details to gui
  function connStat(message, severity)
    stat_details.Value = severity
    stat_details.String = message
    
    if severity == 2 then
      Log.Error(string.format("%s:%s\t%s", txt_address.String, knb_port.String, message))
    end
  end
  
  -- do when event is data
  function parseResponse()
    
    rx = sock:Read(sock.BufferLength)
    
    if rx ~= nil then
      print("received: "..DebugFormatHex(rx))
      stat_details.String = "RX: "..DebugFormatHex(rx)
      -- do something with data here
    end
    
    --sock:Disconnect()
    --connStat("socket closed by client", 1)
  end
      
  sock.EventHandler = function(sock, evt, err)
    if evt == TcpSocket.Events.Connected then -- Connected
      connStat("TX: "..DebugFormatHex(tx), 0)
      sock:Write(tx)
      print("sending: "..DebugFormatHex(tx) )
  
    elseif evt == TcpSocket.Events.Reconnect then -- Reconnecting
      connStat("socket reconnecting...", 5)
    elseif evt == TcpSocket.Events.Data then  -- Data
      connStat("data received from remote", 0)
      parseResponse()   
    elseif evt == TcpSocket.Events.Closed then  -- Closed by remote
      connStat("socket closed by remote", 4)
    elseif evt == TcpSocket.Events.Error then -- Error
      connStat("socket closed due to error", 2)
    elseif evt == TcpSocket.Events.Timeout then -- Timeout
      connStat("socket closed due to timeout", 3)
    end  
  end
  
  --------------------------------------------------------------------
  -- Event Handlers
  --------------------------------------------------------------------
  
  --btn_enable.EventHandler = function()
    --send(enable) 
    --end
  knob_midichannel.EventHandler = function()
    midiChannel = knob_midichannel.Value -1 
    print("MIDI Channel = "..string.format("0x%02X", midiChannel) )
    end
  
  --[[
  for i=1, #btn_scene do
    btn_scene[i].EventHandler = function()
      send(scene[i])
    end
  end
  ]]--  
  for i=1, #btn_scene do
    btn_scene[i].EventHandler = function()
      if btn_scene[i].Boolean == true then
        tx = string.format("%c", 0xB0 + midiChannel).."\x00\x00"..string.format("%c", 0xB0 + midiChannel).."\x20\x00"..string.format("%c", 0xC0 + midiChannel)..string.format("%c", i-1)..ETX
        send(tx)
      end
    end
  end
  
  knob_scene.EventHandler = function()
    tx = string.format("%c", 0xB0 + midiChannel).."\x00\x00"..string.format("%c", 0xB0 + midiChannel).."\x20\x00"..string.format("%c", 0xC0 + midiChannel)..string.format("%c", knob_scene.Value -1)..ETX
    send(tx)
    end
    
  --Mute on   9N, CH, 7F,     8N, CH, 00
  --Mute off  9N, CH, 3F,     8N, CH, 00 
  for i=1, #btn_inputmute do
    btn_inputmute[i].EventHandler = function()
        if btn_inputmute[i].Boolean == true then  --on
          tx = string.format("%c", 0x90 + midiChannel)..string.format("%c", 0x1F + i).."\x7F"..string.format("%c", 0x80 + midiChannel)..string.format("%c", 0x1F + i).."\x00"..ETX
        else
          tx = string.format("%c", 0x90 + midiChannel)..string.format("%c", 0x1F + i).."\x3F"..string.format("%c", 0x80 + midiChannel)..string.format("%c", 0x1F + i).."\x00"..ETX
        end
      send(tx)
    end
  end
  
  for i=1, #btn_outputmute do
    btn_outputmute[i].EventHandler = function()
        if btn_outputmute[i].Boolean == true then  --on
          tx = string.format("%c", 0x90 + midiChannel)..string.format("%c", 0x5F + i).."\x7F"..string.format("%c", 0x80 + midiChannel)..string.format("%c", 0x5F + i).."\x00"..ETX
        else
          tx = string.format("%c", 0x90 + midiChannel)..string.format("%c", 0x5F + i).."\x3F"..string.format("%c", 0x80 + midiChannel)..string.format("%c", 0x5F + i).."\x00"..ETX
        end
      send(tx)
    end
  end
  
  --Fader     BN, 63, CH, BN, 62, 17, BN, 06, VA BN, 26, 07 
  for i=1, #fader_inputfader do
    fader_inputfader[i].EventHandler = function()
      tx = string.format("%c", 0xB0 + midiChannel).."\x63"..string.format("%c", 0x1F + i)..string.format("%c", 0xB0 + midiChannel).."\x62\x17"..string.format("%c", 0xB0 + midiChannel).."\x06"..string.format("%c", fader_inputfader[i].Value)..string.format("%c", 0xB0 + midiChannel).."\x26\x07"..ETX
      send(tx)
    end
  end
  
  for i=1, #fader_outputfader do
    fader_outputfader[i].EventHandler = function()
      tx = string.format("%c", 0xB0 + midiChannel).."\x63"..string.format("%c", 0x5F + i)..string.format("%c", 0xB0 + midiChannel).."\x62\x17"..string.format("%c", 0xB0 + midiChannel).."\x06"..string.format("%c", fader_outputfader[i].Value)..string.format("%c", 0xB0 + midiChannel).."\x26\x07"..ETX
      send(tx)
    end
  end
  
end
